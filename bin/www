#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../dist/app')
const debug = require('debug')('wreathe-server:server')
const http = require('http')
const WebSocket = require('ws')
// const { Server } = require('socket.io')
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)
const wss = new WebSocket.Server({ server })
let clients = new Map()

// const io = new Server(server, {
//   cors: {
//     origin: ['http://localhost:3000', 'http://localhost:8080'], // Replace with your frontend URL
//     // allowedHeaders: ["my-custom-header"],
//     credentials: true,
//   },
// })

/**
 * Listen on provided port, on all network interfaces.
 */

wss.on('connection', ws => {
  ws.on('error', console.error)
  let userId
  let roomId
  // Handle WebSocket connections
  console.log('A user connected')

  ws.on('message', message => {
    const data = JSON.parse(message.toString())
    //BUG WEBSOCKET GETS SENT AS A BUFFER
    console.log('Received message:', data)
    const { type, recepientId, content } = data
    userId = data.userId
    roomId = data.roomId

    if (type === 'join-room') {
      if (!clients.has(roomId)) {
        // If the room doesn't exist, create it and associate the WebSocket connection
        clients.set(roomId, new Map())
      }
      const room = clients.get(roomId)
      if (room) {
        // Associate the WebSocket connection with the user ID within the room
        room.set(userId, ws)
        // Notify other user that this user has connected
        room.forEach((client, clientId) => {
          if (clientId === userId) {
            client.send(
              JSON.stringify({
                type: 'connection-message',
                content: 'You have connected',
                userId,
              }),
            )
          } else {
            client.send(
              JSON.stringify({
                type: 'connection-message',
                content: `${userId} has connected`,
                userId,
              }),
            )
          }
        })
      }
      // Associate the WebSocket connection with the user ID within the room
      // clients.get(roomId).set(userId, ws)
    }

    if (type === 'chat-message') {
      const room = clients.get(roomId)
      if (room) {
        // Send the message to all users in the room except the sender
        room.forEach((client, clientId) => {
          console.log(
            clientId,
            '\n==============================================',
          )

          client.send(JSON.stringify({ userId, content, type: 'chat-message' }))
        })
      }
    }
  })

  ws.on('close', () => {
    // Handle WebSocket connection closure
    console.log('A user disconnected')

    if (userId) {
      if (clients.has(roomId)) {
        // If the room doesn't exist, create it and associate the WebSocket connection
        const room = clients.get(roomId)
        if (room.has(userId)) {
          room.forEach((client, clientId) => {
            if (clientId !== userId) {
              if (clientId === userId) {
                client.send(
                  JSON.stringify({
                    type: 'connection-message',
                    content: 'You have disconnected',
                    userId,
                  }),
                )
              } else {
                client.send(
                  JSON.stringify({
                    type: 'connection-message',
                    content: `${userId} has disconnected`,
                    userId,
                  }),
                )
              }
            }
          })
        }
        //if room exists
        //delete room from Map
      }
    }
  })
})

// io.on('connection', socket => {
//   console.log('A user connected')
//   // socket.emit('test', 'Socket.io is working on the backend!l')
//   socket.on('send_msg', message => {
//     // Handle incoming messages and broadcast to connected clients
//     console.log('message:', message)

//     io.emit('receive_msg', message)
//   })
//   socket.on('disconnect', () => {
//     console.log('A user disconnected')
//   })
// })

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
