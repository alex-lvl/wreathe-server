generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model comment {
  comment_uid       String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content           String          @db.VarChar(250)
  ispublished       Boolean         @default(false)
  comment_timestamp DateTime        @default(now()) @db.Timestamptz(6)
  thread_ref        String?         @db.Uuid
  author_ref        String?         @db.Uuid
  wreathe_user      wreathe_user?   @relation(fields: [author_ref], references: [user_uid], onDelete: NoAction, onUpdate: NoAction)
  thread            thread?         @relation(fields: [thread_ref], references: [thread_uid], onDelete: NoAction, onUpdate: NoAction)
  comment_likes     comment_likes[]
}

model thread {
  thread_uid       String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content          String        @db.VarChar(250)
  ispublished      Boolean       @default(false)
  thread_timestamp DateTime      @default(now()) @db.Timestamptz(6)
  author_ref       String?       @db.Uuid
  comment          comment[]
  wreathe_user     wreathe_user? @relation(fields: [author_ref], references: [user_uid], onDelete: NoAction, onUpdate: NoAction)
  likes            likes[]
}

model wreathe_user {
  user_uid      String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name    String          @db.VarChar(30)
  last_name     String          @db.VarChar(30)
  email         String?         @unique @db.VarChar(100)
  username      String          @unique @db.VarChar(50)
  user_password String          @db.VarChar(100)
  bio           String?         @db.VarChar(150)
  refresh_token String?
  comment       comment[]
  thread        thread[]
  likes         likes[]
  comment_likes comment_likes[]
  following     Follower[]      @relation("Following")
  followers     Follower[]      @relation("Followers")
  sender        message[]       @relation("sender")
  recepient     message[]       @relation("recepient")
}

model likes {
  user_uid     String       @db.Uuid
  thread_uid   String       @db.Uuid
  timestamp    DateTime     @default(now()) @db.Timestamptz(6)
  thread       thread       @relation(fields: [thread_uid], references: [thread_uid])
  wreathe_user wreathe_user @relation(fields: [user_uid], references: [user_uid])

  @@id([user_uid, thread_uid])
}

model comment_likes {
  user_uid     String       @db.Uuid
  comment_uid  String       @db.Uuid
  timestamp    DateTime     @default(now()) @db.Timestamptz(6)
  comment      comment      @relation(fields: [comment_uid], references: [comment_uid])
  wreathe_user wreathe_user @relation(fields: [user_uid], references: [user_uid])

  @@id([user_uid, comment_uid])
}

model Follower {
  followerId  String       @db.Uuid
  followingId String       @db.Uuid
  follower    wreathe_user @relation("Followers", fields: [followerId], references: [user_uid])
  following   wreathe_user @relation("Following", fields: [followingId], references: [user_uid])

  @@id([followerId, followingId])
}

model message {
  message_uid       String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender_ref        String       @db.Uuid
  recepient_ref     String       @db.Uuid
  content           String       @db.VarChar(1000)
  message_timestamp DateTime     @default(now()) @db.Timestamptz(6)
  sender            wreathe_user @relation("sender", fields: [sender_ref], references: [user_uid])
  recepient         wreathe_user @relation("recepient", fields: [recepient_ref], references: [user_uid])
}
